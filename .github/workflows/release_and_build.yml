name: Build, Release, and Notify
on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Download additional dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L -o ffmpeg.tar.xz https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz
          mkdir -p dependencies
          tar -xf ffmpeg.tar.xz -C dependencies
          mv dependencies/ffmpeg-master-latest-linux64-gpl dependencies/ffmpeg
          rm ffmpeg.tar.xz

      - name: Download additional dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl -L -o ffmpeg.zip https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip
          tar -xf ffmpeg.zip -C dependencies
          move dependencies\ffmpeg-master-latest-win64-gpl dependencies\ffmpeg
          rm ffmpeg.zip

      - name: Build with PyInstaller
        run: pyinstaller "GoExport Outro Maker.spec"

      - name: Copy required files to dist
        run: |
          cp readme.md dist/
          cp LICENSE dist/

      - name: Archive Linux Build
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czvf goexport_outro_maker_linux.tar.gz -C dist .
          mv goexport_outro_maker_linux.tar.gz dist/

      - name: Archive Windows Build
        if: matrix.os == 'windows-latest'
        run: |
          powershell -Command "Compress-Archive -Path dist -DestinationPath goexport_outro_maker_windows.zip"
          mv goexport_outro_maker_windows.zip dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: dist/
          if-no-files-found: ignore

  changelog:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      changelog: ${{ steps.extract.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract changelog
        id: extract
        run: |
          section=$(awk '/## \['"${GITHUB_REF_NAME#v}"'\]/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$section" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/**/goexport_outro_maker_linux.tar.gz
            artifacts/**/goexport_outro_maker_windows.zip
          body: ${{ needs.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  discord_notify:
    runs-on: ubuntu-latest
    needs: [changelog, release]
    steps:
      - name: Notify Discord
        run: |
          repo_name="${GITHUB_REPOSITORY#*/}"
          tag="${GITHUB_REF_NAME}"

          changelog="${{ needs.changelog.outputs.changelog }}"

          payload=$(jq -n \
            --arg role "<@&1346974681399427153>" \
            --arg repo "$repo_name" \
            --arg tag "$tag" \
            --arg changelog "$changelog" \
            --arg channel "<#1347670260844855376>" \
            '{content: "\($role)\n\n# \($repo) - \($tag)\n\n\($changelog)\n\n\($channel)"}')

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$payload" \
            ${{ secrets.DISCORD_WEBHOOK }}
